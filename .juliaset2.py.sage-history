"import numpy as np\n\nclass JuliaSet(object):\n\n    def __init__(self, c, n=100):\n        self.c = c\n        self.n = n\n        self._d = 0.001\n        self._complexplane=[]\n        self.set=[]\n\n    def juliamap(self, z):\n        return z**2 + self.c\n\n    def iterate(self, z):\n        m = 0\n        while True:\n            z = self.juliamap(z)\n            m +=1\n            if abs(z)>2:\n                return m\n            elif m>=self.n:\n                return 0\n    \n    def drange(self, start, stop, step):\n        r = start\n        while r <= stop:\n            yield r\n            r += step\n    \n    # Generate evenly spaced values over x and y planes\n    def get_complexplane(self):\n        self._complexplane = []\n        _range=self.drange(-2, 2, self._d)\n        for x in self.drange(-2, 2, self._d):\n            for y in self.drange(-2, 2, self._d):\n                np.append(_complexplane, complex(x,y))\n    \n    def set_spacing(self, d):\n        self._d = d\n        self.get_complexplane()\n        \n    def generate(self):\n        for x in self._complexplane:\n            np.append(self.iterate(x), self.iterate(x))\n        return self.set"
{"patch":[[[[-1,"import numpy as np\n\nclass JuliaSet(object):\n\n    def __init__(self, c, n=100):\n        self.c = c\n        self.n = n\n        self._d = 0.001\n        self._complexplane=[]\n        self.set=[]\n\n    def juliamap(self, z):\n        return z**2 + self.c\n\n    def iterate(self, z):\n        m = 0\n        while True:\n            z = self.juliamap(z)\n            m +=1\n            if abs(z)>2:\n                return m\n            elif m>=self.n:\n                return 0\n    \n    def drange(self, start, stop, step):\n        r = start\n        while r <= stop:\n            yield r\n            r += step\n    \n    # Generate evenly spaced values over x and y planes\n    def get_complexplane(self):\n        self._complexplane = []\n        _range=self.drange(-2, 2, self._d)\n        for x in self.drange(-2, 2, self._d):\n            for y in self.drange(-2, 2, self._d):\n                np.append(_complexplane, complex(x,y))\n    \n    def set_spacing(self, d):\n        self._d = d\n        self.get_complexplane()\n        \n    def generate(self):\n        for x in self._complexplane:\n            np.append(self.iterate(x), self.iterate(x))\n        return self.set"]],0,0,1149,0]],"time":1443523774828}